package com.yaga.targetnav;

import android.Manifest;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.location.LocationManager;
import android.os.Bundle;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;
import android.location.LocationListener;
import android.location.Location;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.core.view.ViewCompat;
import androidx.core.view.WindowInsetsCompat;
import androidx.core.graphics.Insets;

public class MainActivity extends AppCompatActivity {

    private TextView gpsText, azimuthText, targetCoords;
    private EditText distanceInput;
    private Button calcButton, openCameraButton;

    private LocationManager locationManager;
    private SensorManager sensorManager;

    private float azimuth = 0f;
    private double currentLat = 0;
    private double currentLon = 0;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);

        ViewCompat.setOnApplyWindowInsetsListener(findViewById(R.id.main), (v, insets) -> {
            Insets systemBars = insets.getInsets(WindowInsetsCompat.Type.systemBars());
            v.setPadding(systemBars.left, systemBars.top, systemBars.right, systemBars.bottom);
            return insets;
        });

        gpsText = findViewById(R.id.gpsText);
        azimuthText = findViewById(R.id.azimuthText);
        targetCoords = findViewById(R.id.targetCoords);
        distanceInput = findViewById(R.id.distanceInput);
        calcButton = findViewById(R.id.calcButton);
        openCameraButton = findViewById(R.id.openCameraButton); // üëà –ù–æ–≤–∞—è –∫–Ω–æ–ø–∫–∞

        locationManager = (LocationManager) getSystemService(LOCATION_SERVICE);
        sensorManager = (SensorManager) getSystemService(SENSOR_SERVICE);

        // üìç –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é
        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
            ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.ACCESS_FINE_LOCATION}, 1);
        } else {
            locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 2000, 1, locationListener);
        }

        // üìç –î–∞—Ç—á–∏–∫–∏
        Sensor accelerometer = sensorManager.getDefaultSensor(Sensor.TYPE_ACCELEROMETER);
        Sensor magnetometer = sensorManager.getDefaultSensor(Sensor.TYPE_MAGNETIC_FIELD);
        sensorManager.registerListener(sensorListener, accelerometer, SensorManager.SENSOR_DELAY_UI);
        sensorManager.registerListener(sensorListener, magnetometer, SensorManager.SENSOR_DELAY_UI);

        // üìå –ö–Ω–æ–ø–∫–∞ "–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—É"
        calcButton.setOnClickListener(v -> {
            String distStr = distanceInput.getText().toString();
            if (distStr.isEmpty()) {
                Toast.makeText(this, "–í–≤–µ–¥–∏—Ç–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ", Toast.LENGTH_SHORT).show();
                return;
            }

            double distance = Double.parseDouble(distStr);
            double bearing = azimuth;
            double R = 6371000.0; // —Ä–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –º–µ—Ç—Ä–∞—Ö
            double œÜ1 = Math.toRadians(currentLat);
            double Œª1 = Math.toRadians(currentLon);
            double Œ∏ = Math.toRadians(bearing);
            double Œ¥ = distance / R;

            double œÜ2 = Math.asin(Math.sin(œÜ1) * Math.cos(Œ¥) + Math.cos(œÜ1) * Math.sin(Œ¥) * Math.cos(Œ∏));
            double Œª2 = Œª1 + Math.atan2(Math.sin(Œ∏) * Math.sin(Œ¥) * Math.cos(œÜ1),
                    Math.cos(Œ¥) - Math.sin(œÜ1) * Math.sin(œÜ2));

            double targetLat = Math.toDegrees(œÜ2);
            double targetLon = Math.toDegrees(Œª2);

            targetCoords.setText("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–ª–∏:\n" + targetLat + ", " + targetLon);
        });

        // üéØ –ö–Ω–æ–ø–∫–∞ "–û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏—Ü–µ–ª"
        openCameraButton.setOnClickListener(v -> {
            Intent intent = new Intent(MainActivity.this, CameraActivity.class);
            startActivity(intent);
        });
    }

    private final LocationListener locationListener = new LocationListener() {
        @Override
        public void onLocationChanged(@NonNull Location location) {
            currentLat = location.getLatitude();
            currentLon = location.getLongitude();
            gpsText.setText("–®–∏—Ä–æ—Ç–∞: " + currentLat + "\n–î–æ–ª–≥–æ—Ç–∞: " + currentLon);
        }
    };

    private final SensorEventListener sensorListener = new SensorEventListener() {
        float[] gravity;
        float[] geomagnetic;

        @Override
        public void onSensorChanged(SensorEvent event) {
            if (event.sensor.getType() == Sensor.TYPE_ACCELEROMETER)
                gravity = event.values;
            if (event.sensor.getType() == Sensor.TYPE_MAGNETIC_FIELD)
                geomagnetic = event.values;

            if (gravity != null && geomagnetic != null) {
                float[] R = new float[9];
                float[] I = new float[9];
                boolean success = SensorManager.getRotationMatrix(R, I, gravity, geomagnetic);
                if (success) {
                    float[] orientation = new float[3];
                    SensorManager.getOrientation(R, orientation);
                    azimuth = (float) Math.toDegrees(orientation[0]);
                    if (azimuth < 0) {
                        azimuth += 360;
                    }
                    azimuthText.setText("–ê–∑–∏–º—É—Ç: " + (int) azimuth + "¬∞");
                }
            }
        }

        @Override
        public void onAccuracyChanged(Sensor sensor, int accuracy) {}
    };
}
