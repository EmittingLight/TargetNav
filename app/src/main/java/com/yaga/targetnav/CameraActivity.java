package com.yaga.targetnav;

import android.Manifest;
import android.content.pm.PackageManager;
import android.hardware.Camera;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.Bundle;
import android.view.MotionEvent;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;

public class CameraActivity extends AppCompatActivity implements SurfaceHolder.Callback {

    private SurfaceView surfaceView;
    private SurfaceHolder surfaceHolder;
    private Camera camera;
    private TextView coordsText;

    private float azimuth = 0f;
    private double distance = 0;

    private LocationManager locationManager;
    private double currentLat = 0;
    private double currentLon = 0;

    private float firstY = -1;

    private final double verticalFOV = Math.toRadians(60.0); // –ø–æ–ª–µ –∑—Ä–µ–Ω–∏—è –∫–∞–º–µ—Ä—ã

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_camera);

        surfaceView = findViewById(R.id.surfaceView);
        coordsText = findViewById(R.id.coordsText);

        azimuth = getIntent().getFloatExtra("azimuth", 0f);

        surfaceHolder = surfaceView.getHolder();
        surfaceHolder.addCallback(this);

        // üëÜ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–∞–ø–æ–≤
        surfaceView.setOnTouchListener((v, event) -> {
            if (event.getAction() == MotionEvent.ACTION_DOWN) {
                float y = event.getY();
                if (firstY == -1) {
                    firstY = y;
                    Toast.makeText(this, "–ö–æ—Å–Ω–∏—Å—å –≤–µ—Ä—Ö–Ω–µ–π —á–∞—Å—Ç–∏ —Ü–µ–ª–∏", Toast.LENGTH_SHORT).show();
                } else {
                    float secondY = y;
                    float heightPixels = Math.abs(secondY - firstY);
                    firstY = -1; // —Å–±—Ä–æ—Å

                    if (heightPixels < 10) {
                        Toast.makeText(this, "–°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∞—è –≤—ã—Å–æ—Ç–∞", Toast.LENGTH_SHORT).show();
                        return true;
                    }

                    // –ü—Ä–∏–º–µ—Ä: —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ —Ü–µ–ª—å ‚Äî —á–µ–ª–æ–≤–µ–∫ 1.75 –º
                    double realHeight = 1.75;
                    double screenHeight = getResources().getDisplayMetrics().heightPixels;

                    distance = realHeight / (2 * Math.tan(verticalFOV / 2)) * (screenHeight / heightPixels);

                    // –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Ü–µ–ª–∏
                    calculateTargetCoordinates();
                }
            }
            return true;
        });

        locationManager = (LocationManager) getSystemService(LOCATION_SERVICE);
        if (ActivityCompat.checkSelfPermission(this, Manifest.permission.ACCESS_FINE_LOCATION) != PackageManager.PERMISSION_GRANTED) {
            ActivityCompat.requestPermissions(this, new String[]{Manifest.permission.ACCESS_FINE_LOCATION}, 1);
        } else {
            locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 1000, 1, locationListener);
        }
    }

    private void calculateTargetCoordinates() {
        double bearing = azimuth;
        double R = 6371000.0;
        double œÜ1 = Math.toRadians(currentLat);
        double Œª1 = Math.toRadians(currentLon);
        double Œ∏ = Math.toRadians(bearing);
        double Œ¥ = distance / R;

        double œÜ2 = Math.asin(Math.sin(œÜ1) * Math.cos(Œ¥) + Math.cos(œÜ1) * Math.sin(Œ¥) * Math.cos(Œ∏));
        double Œª2 = Œª1 + Math.atan2(Math.sin(Œ∏) * Math.sin(Œ¥) * Math.cos(œÜ1),
                Math.cos(Œ¥) - Math.sin(œÜ1) * Math.sin(œÜ2));

        double targetLat = Math.toDegrees(œÜ2);
        double targetLon = Math.toDegrees(Œª2);

        coordsText.setText(String.format("–¶–µ–ª—å –Ω–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–∏ %.1f –º\n–®–∏—Ä–æ—Ç–∞: %.6f\n–î–æ–ª–≥–æ—Ç–∞: %.6f", distance, targetLat, targetLon));
    }

    private final LocationListener locationListener = new LocationListener() {
        @Override
        public void onLocationChanged(@NonNull Location location) {
            currentLat = location.getLatitude();
            currentLon = location.getLongitude();
        }
    };

    @Override
    public void surfaceCreated(@NonNull SurfaceHolder holder) {
        try {
            camera = Camera.open();
            camera.setDisplayOrientation(90); // üîß –¥–æ–±–∞–≤—å —ç—Ç–æ!
            camera.setPreviewDisplay(holder);
            camera.startPreview();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }


    @Override public void surfaceChanged(@NonNull SurfaceHolder holder, int format, int width, int height) {}
    @Override public void surfaceDestroyed(@NonNull SurfaceHolder holder) {
        if (camera != null) {
            camera.stopPreview();
            camera.release();
        }
    }
}
